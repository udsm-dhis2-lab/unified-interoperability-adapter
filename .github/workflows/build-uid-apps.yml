name: Build iAdapter UI apps

on:
  workflow_dispatch:
    inputs:
      app_names:
        description: "Comma-separated list of app names to build within the NX workspace"
        default: "login,apps"
        required: true
        type: string
  pull_request:
    branches:
      - develop
    paths-ignore:
      - '.github/apps-builds/**'

jobs:
  build-and-zip:
    if: |
      (github.event_name == 'workflow_dispatch' && github.actor != 'github-actions[bot]') ||
      (github.event_name == 'pull_request' && 
       github.event.pull_request.user.login != 'github-actions[bot]' && 
       !contains(github.event.pull_request.title, 'Update zipped builds for apps') &&
       github.event.pull_request.head.user.login != 'github-actions[bot]' &&
       !contains(github.event.pull_request.head.ref, 'github-actions-bot'))
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    env:
      DEFAULT_APP_NAMES: "login,apps"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name:  NX
        run: npm install -g nx

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            iadapter-applications/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('iadapter-applications/package-lock.json', 'iadapter-applications/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm install --legacy-peer-deps
        working-directory: iadapter-applications

      - name: Determine apps to build
        id: determine-apps
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            app_names="${{ github.event.inputs.app_names }}"
          else
            app_names="${{ env.DEFAULT_APP_NAMES }}"
          fi
          echo "Apps to build: $app_names"
          echo "app_names=$app_names" >> $GITHUB_ENV

      - name: Build NX apps
        run: |
          echo "Raw app_names input: '${{ env.app_names }}'"
          app_names="${{ env.app_names }}"
          if [ -z "$app_names" ]; then
            echo "The 'app_names' input is empty. Please provide a list of apps to build."
            exit 1
          fi

          IFS=',' read -ra APPS <<< "$app_names"
          if [ ${#APPS[@]} -eq 0 ]; then
            echo "No apps specified to build. Exiting."
            exit 1
          fi

          for app in "${APPS[@]}"; do
            echo "Building $app in NX workspace..."
            npx nx build "$app" --configuration production
          done

          if [ -d dist ]; then
            echo "Successfully created 'dist' directory."
            ls dist/
          else
            echo "Failed to create 'dist' directory."
          fi
        working-directory: iadapter-applications

      - name: Zip build outputs
        run: |
          mkdir -p builds
          if [ -d builds ]; then
            echo "Successfully created 'builds' directory."
          else
            echo "Failed to create 'builds' directory."
          fi
          app_names="${{ env.app_names }}"
          IFS=',' read -ra APPS <<< "$app_names"
          for app in "${APPS[@]}"; do
            build_dir="dist/apps/${app}/browser/"
            zip_file="${app}.zip"
            if [ -d "$build_dir" ]; then
              cp -r dist/apps/${app}/browser builds/
              cd builds || exit 1
              mv browser "${app}"
              zip -r "$zip_file" "${app}"/*
              cd ..
              echo "Zipped $app build output to $zip_file"
            else
              echo "Build directory $build_dir not found, skipping zipping for $app."
            fi
          done
          ls builds/
        working-directory: iadapter-applications

      - name: Move zipped files to .github/apps-builds
        run: |
          mkdir -p .github/apps-builds

          if [ -d ".github/apps-builds" ]; then
            echo "Clearing existing contents in .github/apps-builds..."
            rm -rf .github/apps-builds/*
          fi

          if ls iadapter-applications/builds/*.zip 1> /dev/null 2>&1; then
            echo "Moving new zipped files to .github/apps-builds..."
            mv iadapter-applications/builds/*.zip .github/apps-builds/
            ls -al .github/apps-builds/
          else
            echo "No zip files found in builds directory to move."
          fi

      - name: Commit zipped builds to repository
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git pull origin develop --no-rebase

          git add .github/apps-builds
          git diff --cached --quiet || git commit -m "Update zipped builds for apps: ${{ env.app_names }}"

          git push origin HEAD

      - name: Merge to develop
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch origin develop
          git checkout develop
          git merge --no-ff ${{ github.head_ref }} -m "Merge workflow dispatch build for apps: ${{ env.app_names }}"
          git push origin develop

      - name: Push to production
        run: |
          app_names="${{ env.app_names }}"
          IFS=',' read -ra APPS <<< "$app_names"
          
          for app in "${APPS[@]}"; do
            if [ -f ".github/apps-builds/${app}.zip" ]; then
              echo "Pushing ${app}.zip to production..."
              curl --request POST \
                --url ${{secrets.URL}} \
                --header "Authorization: Basic ${{secrets.AUTH}}" \
                --form "file=@.github/apps-builds/${app}.zip" \
                --fail || exit 1
              echo "${app} deployed successfully"
            else
              echo "Warning: ${app}.zip not found in .github/apps-builds/"
            fi
          done
