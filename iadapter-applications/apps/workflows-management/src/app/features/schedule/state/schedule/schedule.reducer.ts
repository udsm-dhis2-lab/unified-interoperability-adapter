/* eslint-disable @typescript-eslint/no-unused-vars */
import { Action, createReducer, on } from '@ngrx/store';
import { ScheduleActions } from './schedule.actions';

import {
  initialScheduleState,
  pagerScheduleInitialState,
  scheduleAdapter,
  ScheduleState,
} from './schedule.state';
import { updateInitialSchedulePagerState } from '../../helpers/state.helper';

export const scheduleFeatureKey = 'schedules';
export const routerStateKey = 'router';

const scheduleReducer = createReducer(
  initialScheduleState,
  on(ScheduleActions.addSchedule, (state: ScheduleState, { schedule }) => {
    return {
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: true,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse: null,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    };
  }),
  on(
    ScheduleActions.addScheduleSuccess,
    (state: ScheduleState, { schedule }) => {
      return scheduleAdapter.upsertOne(schedule, {
        ...state,
        loadedCurrentTaskSchedule: false,
        loadingCurrentTaskSchedule: false,
        loading: false,
        loaded: false,
        loadingSchedule: false,
        loadedSchedule: false,
        addingSchedule: false,
        addedSchedule: true,
        updatingSchedule: false,
        updatedSchedule: false,
        deletingSchedule: false,
        deletedSchedule: false,
        httpErrorResponse: null,
        editedSchedule: null,
        currentSelectedSchedule: schedule,
        runned: false,
        running: false,
        executedSchedule: null,
      });
    }
  ),
  on(
    ScheduleActions.addScheduleFailure,
    (state: ScheduleState, { httpErrorResponse }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  ),
  on(ScheduleActions.loadSchedule, (state: ScheduleState) => {
    return {
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: true,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse: null,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    };
  }),
  on(
    ScheduleActions.loadScheduleSuccess,
    (state: ScheduleState, { schedule }) => {
      return scheduleAdapter.upsertOne(schedule, {
        ...state,
        loadedCurrentTaskSchedule: false,
        loadingCurrentTaskSchedule: false,
        loading: false,
        loaded: false,
        loadingSchedule: false,
        loadedSchedule: true,
        addingSchedule: false,
        addedSchedule: false,
        updatingSchedule: false,
        updatedSchedule: false,
        deletingSchedule: false,
        deletedSchedule: false,
        httpErrorResponse: null,
        editedSchedule: null,
        currentSelectedSchedule: schedule,
        runned: false,
        running: false,
        executedSchedule: null,
      });
    }
  ),
  on(
    ScheduleActions.loadScheduleFailure,
    (state: ScheduleState, { httpErrorResponse }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  ),
  on(ScheduleActions.loadSchedules, (state: ScheduleState) => {
    return {
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: true,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse: null,
      pager: pagerScheduleInitialState,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    };
  }),
  on(
    ScheduleActions.loadSchedulesSuccess,
    (state: ScheduleState, { scheduleAPIResult }) => {
      return scheduleAdapter.upsertMany(scheduleAPIResult.schedules, {
        ...state,
        loadedCurrentTaskSchedule: false,
        loadingCurrentTaskSchedule: false,
        loading: false,
        loaded: true,
        loadingSchedule: false,
        loadedSchedule: false,
        addingSchedule: false,
        addedSchedule: false,
        updatingSchedule: false,
        updatedSchedule: false,
        deletingSchedule: false,
        deletedSchedule: false,
        httpErrorResponse: null,
        editedSchedule: null,
        currentSelectedSchedule: null,
        runned: false,
        running: false,
        executedSchedule: null,
        pager: updateInitialSchedulePagerState(state.pager, scheduleAPIResult),
      });
    }
  ),
  on(
    ScheduleActions.loadSchedulesFailure,
    (state: ScheduleState, { httpErrorResponse }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse,
      pager: pagerScheduleInitialState,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  ),
  on(ScheduleActions.updateSchedule, (state: ScheduleState, { schedule }) => {
    return {
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: true,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse: null,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    };
  }),
  on(
    ScheduleActions.updateScheduleSuccess,
    (state: ScheduleState, { schedule, updatedSchedule }) => {
      return scheduleAdapter.updateOne(schedule, {
        ...state,
        loadedCurrentTaskSchedule: false,
        loadingCurrentTaskSchedule: false,
        loading: false,
        loaded: false,
        loadingSchedule: false,
        loadedSchedule: false,
        addingSchedule: false,
        addedSchedule: false,
        updatingSchedule: false,
        updatedSchedule: true,
        deletingSchedule: false,
        deletedSchedule: false,
        httpErrorResponse: null,
        editedSchedule: null,
        currentSelectedSchedule: updatedSchedule,
        runned: false,
        running: false,
        executedSchedule: null,
      });
    }
  ),
  on(
    ScheduleActions.updateScheduleFailure,
    (state: ScheduleState, { httpErrorResponse }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  ),
  on(ScheduleActions.deleteSchedule, (state: ScheduleState, { schedule }) => {
    return {
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: true,
      deletedSchedule: false,
      httpErrorResponse: null,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    };
  }),
  on(
    ScheduleActions.deleteScheduleSuccess,
    (state: ScheduleState, { schedule }) => {
      return scheduleAdapter.removeOne(schedule.id, {
        ...state,
        loadedCurrentTaskSchedule: false,
        loadingCurrentTaskSchedule: false,
        loading: false,
        loaded: false,
        loadingSchedule: false,
        loadedSchedule: false,
        addingSchedule: false,
        addedSchedule: false,
        updatingSchedule: false,
        updatedSchedule: false,
        deletingSchedule: false,
        deletedSchedule: true,
        httpErrorResponse: null,
        editedSchedule: null,
        currentSelectedSchedule: null,
        runned: false,
        running: false,
        executedSchedule: null,
      });
    }
  ),
  on(
    ScheduleActions.deleteScheduleFailure,
    (state: ScheduleState, { httpErrorResponse }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  ),
  on(
    ScheduleActions.setEditedSchedule,
    (state: ScheduleState, { schedule }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      editedSchedule: schedule,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  ),
  on(
    ScheduleActions.setCurrentSelectedSchedule,
    (state: ScheduleState, { schedule }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      editedSchedule: null,
      currentSelectedSchedule: schedule,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  ),
  on(
    ScheduleActions.setCurrentParams,
    (state: ScheduleState, { scheduleParams }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      scheduleParams,
    })
  ),
  on(
    ScheduleActions.setCurrentExecutedScheduleTask,
    (state: ScheduleState, { executedScheduleTask }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      executedScheduleTask,
    })
  ),
  on(ScheduleActions.loadCurrentScheduledTask, (state: ScheduleState) => {
    return {
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: true,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse: null,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    };
  }),
  on(
    ScheduleActions.loadCurrentScheduledTaskSuccess,
    (state: ScheduleState, { executedScheduleTask }) => {
      return {
        ...state,
        loadedCurrentTaskSchedule: false,
        loadingCurrentTaskSchedule: false,
        loading: false,
        loaded: false,
        loadingSchedule: false,
        loadedSchedule: true,
        addingSchedule: false,
        addedSchedule: false,
        updatingSchedule: false,
        updatedSchedule: false,
        deletingSchedule: false,
        deletedSchedule: false,
        httpErrorResponse: null,
        editedSchedule: null,
        runned: false,
        running: false,
        executedSchedule: null,
        executedScheduleTask,
      };
    }
  ),
  on(
    ScheduleActions.loadScheduleFailure,
    (state: ScheduleState, { httpErrorResponse }) => ({
      ...state,
      loadedCurrentTaskSchedule: false,
      loadingCurrentTaskSchedule: false,
      loading: false,
      loaded: false,
      loadingSchedule: false,
      loadedSchedule: false,
      addingSchedule: false,
      addedSchedule: false,
      updatingSchedule: false,
      updatedSchedule: false,
      deletingSchedule: false,
      deletedSchedule: false,
      httpErrorResponse,
      editedSchedule: null,
      currentSelectedSchedule: null,
      runned: false,
      running: false,
      executedScheduleTask: null,
    })
  )
);

export function ScheduleReducer(
  state: ScheduleState | undefined,
  action: Action
) {
  return scheduleReducer(state, action);
}
