/* eslint-disable @typescript-eslint/no-unused-vars */
import { Action, createReducer, on } from '@ngrx/store';
import { TaskActions } from './task.actions';
import { updateInitialTaskPagerState } from '../../helpers/state.helper';
import {
  initialTaskState,
  pagerTaskInitialState,
  taskAdapter,
  TaskState,
} from './task.state';

export const taskFeatureKey = 'tasks';

const taskReducer = createReducer(
  initialTaskState,
  on(TaskActions.addTask, (state: TaskState, { task }) => {
    return {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: true,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    };
  }),
  on(TaskActions.addTaskSuccess, (state: TaskState, { task }) => {
    return taskAdapter.upsertOne(task, {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: true,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    });
  }),
  on(TaskActions.addTaskFailure, (state: TaskState, { httpErrorResponse }) => ({
    ...state,
    loading: false,
    loaded: false,
    loadingTask: false,
    loadedTask: false,
    addingTask: false,
    addedTask: false,
    updatingTask: false,
    updatedTask: false,
    deletingTask: false,
    deletedTask: false,
    httpErrorResponse,
    editedTask: null,
    currentSelectedTask: null,
    runnedTask: false,
    runningTask: false,
    currentRunningTask: null,
  })),
  on(TaskActions.loadTask, (state: TaskState) => {
    return {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: true,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    };
  }),
  on(TaskActions.loadTaskSuccess, (state: TaskState, { task }) => {
    return taskAdapter.upsertOne(task, {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: true,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    });
  }),
  on(
    TaskActions.loadTaskFailure,
    (state: TaskState, { httpErrorResponse }) => ({
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    })
  ),
  on(TaskActions.loadTasks, (state: TaskState) => {
    return {
      ...state,
      loading: true,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      pager: pagerTaskInitialState,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    };
  }),
  on(TaskActions.loadTasksSuccess, (state: TaskState, { taskAPIResult }) => {
    return taskAdapter.upsertMany(taskAPIResult.tasks, {
      ...state,
      loading: false,
      loaded: true,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      pager: updateInitialTaskPagerState(state.pager, taskAPIResult),
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    });
  }),
  on(
    TaskActions.loadTasksFailure,
    (state: TaskState, { httpErrorResponse }) => ({
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse,
      pager: pagerTaskInitialState,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    })
  ),
  on(TaskActions.updateTask, (state: TaskState, { task }) => {
    return {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: true,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    };
  }),
  on(TaskActions.updateTaskSuccess, (state: TaskState, { task }) => {
    return taskAdapter.updateOne(task, {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: true,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    });
  }),
  on(
    TaskActions.updateTaskFailure,
    (state: TaskState, { httpErrorResponse }) => ({
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    })
  ),
  on(TaskActions.deleteTask, (state: TaskState, { task }) => {
    return {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: true,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    };
  }),
  on(TaskActions.deleteTaskSuccess, (state: TaskState, { task }) => {
    return taskAdapter.removeOne(task.id, {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: true,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    });
  }),
  on(
    TaskActions.deleteTaskFailure,
    (state: TaskState, { httpErrorResponse }) => ({
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: null,
    })
  ),
  on(TaskActions.setEditedTask, (state: TaskState, { task }) => ({
    ...state,
    loading: false,
    loaded: false,
    loadingTask: false,
    loadedTask: false,
    addingTask: false,
    addedTask: false,
    updatingTask: false,
    updatedTask: false,
    deletingTask: false,
    deletedTask: false,
    editedTask: task,
    currentSelectedTask: null,
    runnedTask: false,
    runningTask: false,
    currentRunningTask: null,
  })),
  on(TaskActions.setCurrentSelectedTask, (state: TaskState, { task }) => ({
    ...state,
    loading: false,
    loaded: false,
    loadingTask: false,
    loadedTask: false,
    addingTask: false,
    addedTask: false,
    updatingTask: false,
    updatedTask: false,
    deletingTask: false,
    deletedTask: false,
    editedTask: null,
    currentSelectedTask: task,
    runnedTask: false,
    runningTask: false,
    currentRunningTask: null,
  })),
  on(TaskActions.getCurrentRunningTask, (state: TaskState, { id }) => {
    return {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: true,
      addedTask: false,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: true,
      currentRunningTask: null,
    };
  }),
  on(TaskActions.getCurrentRunningSuccess, (state: TaskState, { task }) => {
    return {
      ...state,
      loading: false,
      loaded: false,
      loadingTask: false,
      loadedTask: false,
      addingTask: false,
      addedTask: true,
      updatingTask: false,
      updatedTask: false,
      deletingTask: false,
      deletedTask: false,
      httpErrorResponse: null,
      editedTask: null,
      currentSelectedTask: null,
      runnedTask: false,
      runningTask: false,
      currentRunningTask: task,
    };
  })
);

export function TaskReducer(state: TaskState | undefined, action: Action) {
  return taskReducer(state, action);
}
